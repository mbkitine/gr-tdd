# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tdd_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tdd_swig')
    _tdd_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tdd_swig', [dirname(__file__)])
        except ImportError:
            import _tdd_swig
            return _tdd_swig
        try:
            _mod = imp.load_module('_tdd_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tdd_swig = swig_import_helper()
    del swig_import_helper
else:
    import _tdd_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _tdd_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _tdd_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _tdd_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _tdd_swig.high_res_timer_epoch()
class ferMsgCount(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::ferMsgCount.

    To avoid accidental use of raw pointers, tdd::ferMsgCount's constructor is in a private implementation class. tdd::ferMsgCount::make is the public interface for creating new instances.

    Args:
        verbose : 
        framesync : 
        crc : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(verbose, framesync, crc):
        """
        make(int verbose, int framesync, int crc) -> ferMsgCount_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::ferMsgCount.

        To avoid accidental use of raw pointers, tdd::ferMsgCount's constructor is in a private implementation class. tdd::ferMsgCount::make is the public interface for creating new instances.

        Args:
            verbose : 
            framesync : 
            crc : 
        """
        return _tdd_swig.ferMsgCount_make(verbose, framesync, crc)

    make = staticmethod(make)
    __swig_destroy__ = _tdd_swig.delete_ferMsgCount
    __del__ = lambda self: None
ferMsgCount_swigregister = _tdd_swig.ferMsgCount_swigregister
ferMsgCount_swigregister(ferMsgCount)

def ferMsgCount_make(verbose, framesync, crc):
    """
    ferMsgCount_make(int verbose, int framesync, int crc) -> ferMsgCount_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::ferMsgCount.

    To avoid accidental use of raw pointers, tdd::ferMsgCount's constructor is in a private implementation class. tdd::ferMsgCount::make is the public interface for creating new instances.

    Args:
        verbose : 
        framesync : 
        crc : 
    """
    return _tdd_swig.ferMsgCount_make(verbose, framesync, crc)

class ferMsgCount_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::tdd::ferMsgCount)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::tdd::ferMsgCount)> self) -> ferMsgCount_sptr
        __init__(boost::shared_ptr<(gr::tdd::ferMsgCount)> self, ferMsgCount p) -> ferMsgCount_sptr
        """
        this = _tdd_swig.new_ferMsgCount_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ferMsgCount_sptr self) -> ferMsgCount"""
        return _tdd_swig.ferMsgCount_sptr___deref__(self)

    __swig_destroy__ = _tdd_swig.delete_ferMsgCount_sptr
    __del__ = lambda self: None

    def make(self, verbose, framesync, crc):
        """
        make(ferMsgCount_sptr self, int verbose, int framesync, int crc) -> ferMsgCount_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::ferMsgCount.

        To avoid accidental use of raw pointers, tdd::ferMsgCount's constructor is in a private implementation class. tdd::ferMsgCount::make is the public interface for creating new instances.

        Args:
            verbose : 
            framesync : 
            crc : 
        """
        return _tdd_swig.ferMsgCount_sptr_make(self, verbose, framesync, crc)


    def history(self):
        """history(ferMsgCount_sptr self) -> unsigned int"""
        return _tdd_swig.ferMsgCount_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ferMsgCount_sptr self, int which, int delay)
        declare_sample_delay(ferMsgCount_sptr self, unsigned int delay)
        """
        return _tdd_swig.ferMsgCount_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ferMsgCount_sptr self, int which) -> unsigned int"""
        return _tdd_swig.ferMsgCount_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ferMsgCount_sptr self) -> int"""
        return _tdd_swig.ferMsgCount_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ferMsgCount_sptr self) -> double"""
        return _tdd_swig.ferMsgCount_sptr_relative_rate(self)


    def start(self):
        """start(ferMsgCount_sptr self) -> bool"""
        return _tdd_swig.ferMsgCount_sptr_start(self)


    def stop(self):
        """stop(ferMsgCount_sptr self) -> bool"""
        return _tdd_swig.ferMsgCount_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ferMsgCount_sptr self, unsigned int which_input) -> uint64_t"""
        return _tdd_swig.ferMsgCount_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ferMsgCount_sptr self, unsigned int which_output) -> uint64_t"""
        return _tdd_swig.ferMsgCount_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ferMsgCount_sptr self) -> int"""
        return _tdd_swig.ferMsgCount_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ferMsgCount_sptr self, int m)"""
        return _tdd_swig.ferMsgCount_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ferMsgCount_sptr self)"""
        return _tdd_swig.ferMsgCount_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ferMsgCount_sptr self) -> bool"""
        return _tdd_swig.ferMsgCount_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ferMsgCount_sptr self, int m)"""
        return _tdd_swig.ferMsgCount_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ferMsgCount_sptr self) -> int"""
        return _tdd_swig.ferMsgCount_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ferMsgCount_sptr self, int i) -> long"""
        return _tdd_swig.ferMsgCount_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ferMsgCount_sptr self, long max_output_buffer)
        set_max_output_buffer(ferMsgCount_sptr self, int port, long max_output_buffer)
        """
        return _tdd_swig.ferMsgCount_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ferMsgCount_sptr self, int i) -> long"""
        return _tdd_swig.ferMsgCount_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ferMsgCount_sptr self, long min_output_buffer)
        set_min_output_buffer(ferMsgCount_sptr self, int port, long min_output_buffer)
        """
        return _tdd_swig.ferMsgCount_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ferMsgCount_sptr self, int which) -> float
        pc_input_buffers_full(ferMsgCount_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgCount_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ferMsgCount_sptr self, int which) -> float
        pc_input_buffers_full_avg(ferMsgCount_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgCount_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ferMsgCount_sptr self, int which) -> float
        pc_input_buffers_full_var(ferMsgCount_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgCount_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ferMsgCount_sptr self, int which) -> float
        pc_output_buffers_full(ferMsgCount_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgCount_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ferMsgCount_sptr self, int which) -> float
        pc_output_buffers_full_avg(ferMsgCount_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgCount_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ferMsgCount_sptr self, int which) -> float
        pc_output_buffers_full_var(ferMsgCount_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgCount_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ferMsgCount_sptr self) -> float"""
        return _tdd_swig.ferMsgCount_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ferMsgCount_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tdd_swig.ferMsgCount_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ferMsgCount_sptr self)"""
        return _tdd_swig.ferMsgCount_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ferMsgCount_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tdd_swig.ferMsgCount_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ferMsgCount_sptr self) -> int"""
        return _tdd_swig.ferMsgCount_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ferMsgCount_sptr self) -> int"""
        return _tdd_swig.ferMsgCount_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ferMsgCount_sptr self, int priority) -> int"""
        return _tdd_swig.ferMsgCount_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ferMsgCount_sptr self) -> std::string"""
        return _tdd_swig.ferMsgCount_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ferMsgCount_sptr self) -> std::string"""
        return _tdd_swig.ferMsgCount_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ferMsgCount_sptr self) -> io_signature_sptr"""
        return _tdd_swig.ferMsgCount_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ferMsgCount_sptr self) -> io_signature_sptr"""
        return _tdd_swig.ferMsgCount_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ferMsgCount_sptr self) -> long"""
        return _tdd_swig.ferMsgCount_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ferMsgCount_sptr self) -> basic_block_sptr"""
        return _tdd_swig.ferMsgCount_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ferMsgCount_sptr self, int ninputs, int noutputs) -> bool"""
        return _tdd_swig.ferMsgCount_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ferMsgCount_sptr self) -> std::string"""
        return _tdd_swig.ferMsgCount_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ferMsgCount_sptr self, std::string name)"""
        return _tdd_swig.ferMsgCount_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ferMsgCount_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _tdd_swig.ferMsgCount_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ferMsgCount_sptr self) -> swig_int_ptr"""
        return _tdd_swig.ferMsgCount_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ferMsgCount_sptr self) -> swig_int_ptr"""
        return _tdd_swig.ferMsgCount_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ferMsgCount_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _tdd_swig.ferMsgCount_sptr_message_subscribers(self, which_port)

ferMsgCount_sptr_swigregister = _tdd_swig.ferMsgCount_sptr_swigregister
ferMsgCount_sptr_swigregister(ferMsgCount_sptr)


ferMsgCount_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ferMsgCount = ferMsgCount.make;

class ferMsgBlock(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::ferMsgBlock.

    To avoid accidental use of raw pointers, tdd::ferMsgBlock's constructor is in a private implementation class. tdd::ferMsgBlock::make is the public interface for creating new instances.

    Args:
        numSamples : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(numSamples):
        """
        make(float numSamples) -> ferMsgBlock_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::ferMsgBlock.

        To avoid accidental use of raw pointers, tdd::ferMsgBlock's constructor is in a private implementation class. tdd::ferMsgBlock::make is the public interface for creating new instances.

        Args:
            numSamples : 
        """
        return _tdd_swig.ferMsgBlock_make(numSamples)

    make = staticmethod(make)
    __swig_destroy__ = _tdd_swig.delete_ferMsgBlock
    __del__ = lambda self: None
ferMsgBlock_swigregister = _tdd_swig.ferMsgBlock_swigregister
ferMsgBlock_swigregister(ferMsgBlock)

def ferMsgBlock_make(numSamples):
    """
    ferMsgBlock_make(float numSamples) -> ferMsgBlock_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::ferMsgBlock.

    To avoid accidental use of raw pointers, tdd::ferMsgBlock's constructor is in a private implementation class. tdd::ferMsgBlock::make is the public interface for creating new instances.

    Args:
        numSamples : 
    """
    return _tdd_swig.ferMsgBlock_make(numSamples)

class ferMsgBlock_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::tdd::ferMsgBlock)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::tdd::ferMsgBlock)> self) -> ferMsgBlock_sptr
        __init__(boost::shared_ptr<(gr::tdd::ferMsgBlock)> self, ferMsgBlock p) -> ferMsgBlock_sptr
        """
        this = _tdd_swig.new_ferMsgBlock_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ferMsgBlock_sptr self) -> ferMsgBlock"""
        return _tdd_swig.ferMsgBlock_sptr___deref__(self)

    __swig_destroy__ = _tdd_swig.delete_ferMsgBlock_sptr
    __del__ = lambda self: None

    def make(self, numSamples):
        """
        make(ferMsgBlock_sptr self, float numSamples) -> ferMsgBlock_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::ferMsgBlock.

        To avoid accidental use of raw pointers, tdd::ferMsgBlock's constructor is in a private implementation class. tdd::ferMsgBlock::make is the public interface for creating new instances.

        Args:
            numSamples : 
        """
        return _tdd_swig.ferMsgBlock_sptr_make(self, numSamples)


    def history(self):
        """history(ferMsgBlock_sptr self) -> unsigned int"""
        return _tdd_swig.ferMsgBlock_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ferMsgBlock_sptr self, int which, int delay)
        declare_sample_delay(ferMsgBlock_sptr self, unsigned int delay)
        """
        return _tdd_swig.ferMsgBlock_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ferMsgBlock_sptr self, int which) -> unsigned int"""
        return _tdd_swig.ferMsgBlock_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ferMsgBlock_sptr self) -> int"""
        return _tdd_swig.ferMsgBlock_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ferMsgBlock_sptr self) -> double"""
        return _tdd_swig.ferMsgBlock_sptr_relative_rate(self)


    def start(self):
        """start(ferMsgBlock_sptr self) -> bool"""
        return _tdd_swig.ferMsgBlock_sptr_start(self)


    def stop(self):
        """stop(ferMsgBlock_sptr self) -> bool"""
        return _tdd_swig.ferMsgBlock_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ferMsgBlock_sptr self, unsigned int which_input) -> uint64_t"""
        return _tdd_swig.ferMsgBlock_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ferMsgBlock_sptr self, unsigned int which_output) -> uint64_t"""
        return _tdd_swig.ferMsgBlock_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ferMsgBlock_sptr self) -> int"""
        return _tdd_swig.ferMsgBlock_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ferMsgBlock_sptr self, int m)"""
        return _tdd_swig.ferMsgBlock_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ferMsgBlock_sptr self)"""
        return _tdd_swig.ferMsgBlock_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ferMsgBlock_sptr self) -> bool"""
        return _tdd_swig.ferMsgBlock_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ferMsgBlock_sptr self, int m)"""
        return _tdd_swig.ferMsgBlock_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ferMsgBlock_sptr self) -> int"""
        return _tdd_swig.ferMsgBlock_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ferMsgBlock_sptr self, int i) -> long"""
        return _tdd_swig.ferMsgBlock_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ferMsgBlock_sptr self, long max_output_buffer)
        set_max_output_buffer(ferMsgBlock_sptr self, int port, long max_output_buffer)
        """
        return _tdd_swig.ferMsgBlock_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ferMsgBlock_sptr self, int i) -> long"""
        return _tdd_swig.ferMsgBlock_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ferMsgBlock_sptr self, long min_output_buffer)
        set_min_output_buffer(ferMsgBlock_sptr self, int port, long min_output_buffer)
        """
        return _tdd_swig.ferMsgBlock_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ferMsgBlock_sptr self, int which) -> float
        pc_input_buffers_full(ferMsgBlock_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgBlock_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ferMsgBlock_sptr self, int which) -> float
        pc_input_buffers_full_avg(ferMsgBlock_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgBlock_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ferMsgBlock_sptr self, int which) -> float
        pc_input_buffers_full_var(ferMsgBlock_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgBlock_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ferMsgBlock_sptr self, int which) -> float
        pc_output_buffers_full(ferMsgBlock_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgBlock_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ferMsgBlock_sptr self, int which) -> float
        pc_output_buffers_full_avg(ferMsgBlock_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgBlock_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ferMsgBlock_sptr self, int which) -> float
        pc_output_buffers_full_var(ferMsgBlock_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgBlock_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ferMsgBlock_sptr self) -> float"""
        return _tdd_swig.ferMsgBlock_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ferMsgBlock_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tdd_swig.ferMsgBlock_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ferMsgBlock_sptr self)"""
        return _tdd_swig.ferMsgBlock_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ferMsgBlock_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tdd_swig.ferMsgBlock_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ferMsgBlock_sptr self) -> int"""
        return _tdd_swig.ferMsgBlock_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ferMsgBlock_sptr self) -> int"""
        return _tdd_swig.ferMsgBlock_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ferMsgBlock_sptr self, int priority) -> int"""
        return _tdd_swig.ferMsgBlock_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ferMsgBlock_sptr self) -> std::string"""
        return _tdd_swig.ferMsgBlock_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ferMsgBlock_sptr self) -> std::string"""
        return _tdd_swig.ferMsgBlock_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ferMsgBlock_sptr self) -> io_signature_sptr"""
        return _tdd_swig.ferMsgBlock_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ferMsgBlock_sptr self) -> io_signature_sptr"""
        return _tdd_swig.ferMsgBlock_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ferMsgBlock_sptr self) -> long"""
        return _tdd_swig.ferMsgBlock_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ferMsgBlock_sptr self) -> basic_block_sptr"""
        return _tdd_swig.ferMsgBlock_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ferMsgBlock_sptr self, int ninputs, int noutputs) -> bool"""
        return _tdd_swig.ferMsgBlock_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ferMsgBlock_sptr self) -> std::string"""
        return _tdd_swig.ferMsgBlock_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ferMsgBlock_sptr self, std::string name)"""
        return _tdd_swig.ferMsgBlock_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ferMsgBlock_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _tdd_swig.ferMsgBlock_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ferMsgBlock_sptr self) -> swig_int_ptr"""
        return _tdd_swig.ferMsgBlock_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ferMsgBlock_sptr self) -> swig_int_ptr"""
        return _tdd_swig.ferMsgBlock_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ferMsgBlock_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _tdd_swig.ferMsgBlock_sptr_message_subscribers(self, which_port)

ferMsgBlock_sptr_swigregister = _tdd_swig.ferMsgBlock_sptr_swigregister
ferMsgBlock_sptr_swigregister(ferMsgBlock_sptr)


ferMsgBlock_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ferMsgBlock = ferMsgBlock.make;

class ferMsgGen(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::ferMsgGen.

    To avoid accidental use of raw pointers, tdd::ferMsgGen's constructor is in a private implementation class. tdd::ferMsgGen::make is the public interface for creating new instances.

    Args:
        frame_size : 
        out_tag_key : 
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(frame_size, out_tag_key, len_tag_key):
        """
        make(int frame_size, std::string out_tag_key, std::string len_tag_key) -> ferMsgGen_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::ferMsgGen.

        To avoid accidental use of raw pointers, tdd::ferMsgGen's constructor is in a private implementation class. tdd::ferMsgGen::make is the public interface for creating new instances.

        Args:
            frame_size : 
            out_tag_key : 
            len_tag_key : 
        """
        return _tdd_swig.ferMsgGen_make(frame_size, out_tag_key, len_tag_key)

    make = staticmethod(make)
    __swig_destroy__ = _tdd_swig.delete_ferMsgGen
    __del__ = lambda self: None
ferMsgGen_swigregister = _tdd_swig.ferMsgGen_swigregister
ferMsgGen_swigregister(ferMsgGen)

def ferMsgGen_make(frame_size, out_tag_key, len_tag_key):
    """
    ferMsgGen_make(int frame_size, std::string out_tag_key, std::string len_tag_key) -> ferMsgGen_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::ferMsgGen.

    To avoid accidental use of raw pointers, tdd::ferMsgGen's constructor is in a private implementation class. tdd::ferMsgGen::make is the public interface for creating new instances.

    Args:
        frame_size : 
        out_tag_key : 
        len_tag_key : 
    """
    return _tdd_swig.ferMsgGen_make(frame_size, out_tag_key, len_tag_key)

class ferMsgGen_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::tdd::ferMsgGen)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::tdd::ferMsgGen)> self) -> ferMsgGen_sptr
        __init__(boost::shared_ptr<(gr::tdd::ferMsgGen)> self, ferMsgGen p) -> ferMsgGen_sptr
        """
        this = _tdd_swig.new_ferMsgGen_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ferMsgGen_sptr self) -> ferMsgGen"""
        return _tdd_swig.ferMsgGen_sptr___deref__(self)

    __swig_destroy__ = _tdd_swig.delete_ferMsgGen_sptr
    __del__ = lambda self: None

    def make(self, frame_size, out_tag_key, len_tag_key):
        """
        make(ferMsgGen_sptr self, int frame_size, std::string out_tag_key, std::string len_tag_key) -> ferMsgGen_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::ferMsgGen.

        To avoid accidental use of raw pointers, tdd::ferMsgGen's constructor is in a private implementation class. tdd::ferMsgGen::make is the public interface for creating new instances.

        Args:
            frame_size : 
            out_tag_key : 
            len_tag_key : 
        """
        return _tdd_swig.ferMsgGen_sptr_make(self, frame_size, out_tag_key, len_tag_key)


    def history(self):
        """history(ferMsgGen_sptr self) -> unsigned int"""
        return _tdd_swig.ferMsgGen_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ferMsgGen_sptr self, int which, int delay)
        declare_sample_delay(ferMsgGen_sptr self, unsigned int delay)
        """
        return _tdd_swig.ferMsgGen_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ferMsgGen_sptr self, int which) -> unsigned int"""
        return _tdd_swig.ferMsgGen_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ferMsgGen_sptr self) -> int"""
        return _tdd_swig.ferMsgGen_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ferMsgGen_sptr self) -> double"""
        return _tdd_swig.ferMsgGen_sptr_relative_rate(self)


    def start(self):
        """start(ferMsgGen_sptr self) -> bool"""
        return _tdd_swig.ferMsgGen_sptr_start(self)


    def stop(self):
        """stop(ferMsgGen_sptr self) -> bool"""
        return _tdd_swig.ferMsgGen_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ferMsgGen_sptr self, unsigned int which_input) -> uint64_t"""
        return _tdd_swig.ferMsgGen_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ferMsgGen_sptr self, unsigned int which_output) -> uint64_t"""
        return _tdd_swig.ferMsgGen_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ferMsgGen_sptr self) -> int"""
        return _tdd_swig.ferMsgGen_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ferMsgGen_sptr self, int m)"""
        return _tdd_swig.ferMsgGen_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ferMsgGen_sptr self)"""
        return _tdd_swig.ferMsgGen_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ferMsgGen_sptr self) -> bool"""
        return _tdd_swig.ferMsgGen_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ferMsgGen_sptr self, int m)"""
        return _tdd_swig.ferMsgGen_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ferMsgGen_sptr self) -> int"""
        return _tdd_swig.ferMsgGen_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ferMsgGen_sptr self, int i) -> long"""
        return _tdd_swig.ferMsgGen_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ferMsgGen_sptr self, long max_output_buffer)
        set_max_output_buffer(ferMsgGen_sptr self, int port, long max_output_buffer)
        """
        return _tdd_swig.ferMsgGen_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ferMsgGen_sptr self, int i) -> long"""
        return _tdd_swig.ferMsgGen_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ferMsgGen_sptr self, long min_output_buffer)
        set_min_output_buffer(ferMsgGen_sptr self, int port, long min_output_buffer)
        """
        return _tdd_swig.ferMsgGen_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ferMsgGen_sptr self, int which) -> float
        pc_input_buffers_full(ferMsgGen_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgGen_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ferMsgGen_sptr self, int which) -> float
        pc_input_buffers_full_avg(ferMsgGen_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgGen_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ferMsgGen_sptr self, int which) -> float
        pc_input_buffers_full_var(ferMsgGen_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgGen_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ferMsgGen_sptr self, int which) -> float
        pc_output_buffers_full(ferMsgGen_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgGen_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ferMsgGen_sptr self, int which) -> float
        pc_output_buffers_full_avg(ferMsgGen_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgGen_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ferMsgGen_sptr self, int which) -> float
        pc_output_buffers_full_var(ferMsgGen_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.ferMsgGen_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ferMsgGen_sptr self) -> float"""
        return _tdd_swig.ferMsgGen_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ferMsgGen_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tdd_swig.ferMsgGen_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ferMsgGen_sptr self)"""
        return _tdd_swig.ferMsgGen_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ferMsgGen_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tdd_swig.ferMsgGen_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ferMsgGen_sptr self) -> int"""
        return _tdd_swig.ferMsgGen_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ferMsgGen_sptr self) -> int"""
        return _tdd_swig.ferMsgGen_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ferMsgGen_sptr self, int priority) -> int"""
        return _tdd_swig.ferMsgGen_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ferMsgGen_sptr self) -> std::string"""
        return _tdd_swig.ferMsgGen_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ferMsgGen_sptr self) -> std::string"""
        return _tdd_swig.ferMsgGen_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ferMsgGen_sptr self) -> io_signature_sptr"""
        return _tdd_swig.ferMsgGen_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ferMsgGen_sptr self) -> io_signature_sptr"""
        return _tdd_swig.ferMsgGen_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ferMsgGen_sptr self) -> long"""
        return _tdd_swig.ferMsgGen_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ferMsgGen_sptr self) -> basic_block_sptr"""
        return _tdd_swig.ferMsgGen_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ferMsgGen_sptr self, int ninputs, int noutputs) -> bool"""
        return _tdd_swig.ferMsgGen_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ferMsgGen_sptr self) -> std::string"""
        return _tdd_swig.ferMsgGen_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ferMsgGen_sptr self, std::string name)"""
        return _tdd_swig.ferMsgGen_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ferMsgGen_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _tdd_swig.ferMsgGen_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ferMsgGen_sptr self) -> swig_int_ptr"""
        return _tdd_swig.ferMsgGen_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ferMsgGen_sptr self) -> swig_int_ptr"""
        return _tdd_swig.ferMsgGen_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ferMsgGen_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _tdd_swig.ferMsgGen_sptr_message_subscribers(self, which_port)

ferMsgGen_sptr_swigregister = _tdd_swig.ferMsgGen_sptr_swigregister
ferMsgGen_sptr_swigregister(ferMsgGen_sptr)


ferMsgGen_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ferMsgGen = ferMsgGen.make;

class nullMsgSink(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::nullMsgSink.

    To avoid accidental use of raw pointers, tdd::nullMsgSink's constructor is in a private implementation class. tdd::nullMsgSink::make is the public interface for creating new instances.

    Args:
        meta : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(meta):
        """
        make(int meta) -> nullMsgSink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::nullMsgSink.

        To avoid accidental use of raw pointers, tdd::nullMsgSink's constructor is in a private implementation class. tdd::nullMsgSink::make is the public interface for creating new instances.

        Args:
            meta : 
        """
        return _tdd_swig.nullMsgSink_make(meta)

    make = staticmethod(make)
    __swig_destroy__ = _tdd_swig.delete_nullMsgSink
    __del__ = lambda self: None
nullMsgSink_swigregister = _tdd_swig.nullMsgSink_swigregister
nullMsgSink_swigregister(nullMsgSink)

def nullMsgSink_make(meta):
    """
    nullMsgSink_make(int meta) -> nullMsgSink_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::nullMsgSink.

    To avoid accidental use of raw pointers, tdd::nullMsgSink's constructor is in a private implementation class. tdd::nullMsgSink::make is the public interface for creating new instances.

    Args:
        meta : 
    """
    return _tdd_swig.nullMsgSink_make(meta)

class nullMsgSink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::tdd::nullMsgSink)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::tdd::nullMsgSink)> self) -> nullMsgSink_sptr
        __init__(boost::shared_ptr<(gr::tdd::nullMsgSink)> self, nullMsgSink p) -> nullMsgSink_sptr
        """
        this = _tdd_swig.new_nullMsgSink_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(nullMsgSink_sptr self) -> nullMsgSink"""
        return _tdd_swig.nullMsgSink_sptr___deref__(self)

    __swig_destroy__ = _tdd_swig.delete_nullMsgSink_sptr
    __del__ = lambda self: None

    def make(self, meta):
        """
        make(nullMsgSink_sptr self, int meta) -> nullMsgSink_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::nullMsgSink.

        To avoid accidental use of raw pointers, tdd::nullMsgSink's constructor is in a private implementation class. tdd::nullMsgSink::make is the public interface for creating new instances.

        Args:
            meta : 
        """
        return _tdd_swig.nullMsgSink_sptr_make(self, meta)


    def history(self):
        """history(nullMsgSink_sptr self) -> unsigned int"""
        return _tdd_swig.nullMsgSink_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(nullMsgSink_sptr self, int which, int delay)
        declare_sample_delay(nullMsgSink_sptr self, unsigned int delay)
        """
        return _tdd_swig.nullMsgSink_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(nullMsgSink_sptr self, int which) -> unsigned int"""
        return _tdd_swig.nullMsgSink_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(nullMsgSink_sptr self) -> int"""
        return _tdd_swig.nullMsgSink_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(nullMsgSink_sptr self) -> double"""
        return _tdd_swig.nullMsgSink_sptr_relative_rate(self)


    def start(self):
        """start(nullMsgSink_sptr self) -> bool"""
        return _tdd_swig.nullMsgSink_sptr_start(self)


    def stop(self):
        """stop(nullMsgSink_sptr self) -> bool"""
        return _tdd_swig.nullMsgSink_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(nullMsgSink_sptr self, unsigned int which_input) -> uint64_t"""
        return _tdd_swig.nullMsgSink_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(nullMsgSink_sptr self, unsigned int which_output) -> uint64_t"""
        return _tdd_swig.nullMsgSink_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(nullMsgSink_sptr self) -> int"""
        return _tdd_swig.nullMsgSink_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(nullMsgSink_sptr self, int m)"""
        return _tdd_swig.nullMsgSink_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(nullMsgSink_sptr self)"""
        return _tdd_swig.nullMsgSink_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(nullMsgSink_sptr self) -> bool"""
        return _tdd_swig.nullMsgSink_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(nullMsgSink_sptr self, int m)"""
        return _tdd_swig.nullMsgSink_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(nullMsgSink_sptr self) -> int"""
        return _tdd_swig.nullMsgSink_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(nullMsgSink_sptr self, int i) -> long"""
        return _tdd_swig.nullMsgSink_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(nullMsgSink_sptr self, long max_output_buffer)
        set_max_output_buffer(nullMsgSink_sptr self, int port, long max_output_buffer)
        """
        return _tdd_swig.nullMsgSink_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(nullMsgSink_sptr self, int i) -> long"""
        return _tdd_swig.nullMsgSink_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(nullMsgSink_sptr self, long min_output_buffer)
        set_min_output_buffer(nullMsgSink_sptr self, int port, long min_output_buffer)
        """
        return _tdd_swig.nullMsgSink_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(nullMsgSink_sptr self, int which) -> float
        pc_input_buffers_full(nullMsgSink_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.nullMsgSink_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(nullMsgSink_sptr self, int which) -> float
        pc_input_buffers_full_avg(nullMsgSink_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.nullMsgSink_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(nullMsgSink_sptr self, int which) -> float
        pc_input_buffers_full_var(nullMsgSink_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.nullMsgSink_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(nullMsgSink_sptr self, int which) -> float
        pc_output_buffers_full(nullMsgSink_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.nullMsgSink_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(nullMsgSink_sptr self, int which) -> float
        pc_output_buffers_full_avg(nullMsgSink_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.nullMsgSink_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(nullMsgSink_sptr self, int which) -> float
        pc_output_buffers_full_var(nullMsgSink_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.nullMsgSink_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(nullMsgSink_sptr self) -> float"""
        return _tdd_swig.nullMsgSink_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(nullMsgSink_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tdd_swig.nullMsgSink_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(nullMsgSink_sptr self)"""
        return _tdd_swig.nullMsgSink_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(nullMsgSink_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tdd_swig.nullMsgSink_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(nullMsgSink_sptr self) -> int"""
        return _tdd_swig.nullMsgSink_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(nullMsgSink_sptr self) -> int"""
        return _tdd_swig.nullMsgSink_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(nullMsgSink_sptr self, int priority) -> int"""
        return _tdd_swig.nullMsgSink_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(nullMsgSink_sptr self) -> std::string"""
        return _tdd_swig.nullMsgSink_sptr_name(self)


    def symbol_name(self):
        """symbol_name(nullMsgSink_sptr self) -> std::string"""
        return _tdd_swig.nullMsgSink_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(nullMsgSink_sptr self) -> io_signature_sptr"""
        return _tdd_swig.nullMsgSink_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(nullMsgSink_sptr self) -> io_signature_sptr"""
        return _tdd_swig.nullMsgSink_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(nullMsgSink_sptr self) -> long"""
        return _tdd_swig.nullMsgSink_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(nullMsgSink_sptr self) -> basic_block_sptr"""
        return _tdd_swig.nullMsgSink_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(nullMsgSink_sptr self, int ninputs, int noutputs) -> bool"""
        return _tdd_swig.nullMsgSink_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(nullMsgSink_sptr self) -> std::string"""
        return _tdd_swig.nullMsgSink_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(nullMsgSink_sptr self, std::string name)"""
        return _tdd_swig.nullMsgSink_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(nullMsgSink_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _tdd_swig.nullMsgSink_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(nullMsgSink_sptr self) -> swig_int_ptr"""
        return _tdd_swig.nullMsgSink_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(nullMsgSink_sptr self) -> swig_int_ptr"""
        return _tdd_swig.nullMsgSink_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(nullMsgSink_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _tdd_swig.nullMsgSink_sptr_message_subscribers(self, which_port)

nullMsgSink_sptr_swigregister = _tdd_swig.nullMsgSink_sptr_swigregister
nullMsgSink_sptr_swigregister(nullMsgSink_sptr)


nullMsgSink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
nullMsgSink = nullMsgSink.make;

class serMsgCnt(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::serMsgCnt.

    To avoid accidental use of raw pointers, tdd::serMsgCnt's constructor is in a private implementation class. tdd::serMsgCnt::make is the public interface for creating new instances.

    Args:
        sync : 
        cnt : 
        verbose : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(sync, cnt, verbose):
        """
        make(std::string sync, std::string cnt, int verbose) -> serMsgCnt_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::serMsgCnt.

        To avoid accidental use of raw pointers, tdd::serMsgCnt's constructor is in a private implementation class. tdd::serMsgCnt::make is the public interface for creating new instances.

        Args:
            sync : 
            cnt : 
            verbose : 
        """
        return _tdd_swig.serMsgCnt_make(sync, cnt, verbose)

    make = staticmethod(make)
    __swig_destroy__ = _tdd_swig.delete_serMsgCnt
    __del__ = lambda self: None
serMsgCnt_swigregister = _tdd_swig.serMsgCnt_swigregister
serMsgCnt_swigregister(serMsgCnt)

def serMsgCnt_make(sync, cnt, verbose):
    """
    serMsgCnt_make(std::string sync, std::string cnt, int verbose) -> serMsgCnt_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of tdd::serMsgCnt.

    To avoid accidental use of raw pointers, tdd::serMsgCnt's constructor is in a private implementation class. tdd::serMsgCnt::make is the public interface for creating new instances.

    Args:
        sync : 
        cnt : 
        verbose : 
    """
    return _tdd_swig.serMsgCnt_make(sync, cnt, verbose)

class serMsgCnt_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::tdd::serMsgCnt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::tdd::serMsgCnt)> self) -> serMsgCnt_sptr
        __init__(boost::shared_ptr<(gr::tdd::serMsgCnt)> self, serMsgCnt p) -> serMsgCnt_sptr
        """
        this = _tdd_swig.new_serMsgCnt_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(serMsgCnt_sptr self) -> serMsgCnt"""
        return _tdd_swig.serMsgCnt_sptr___deref__(self)

    __swig_destroy__ = _tdd_swig.delete_serMsgCnt_sptr
    __del__ = lambda self: None

    def make(self, sync, cnt, verbose):
        """
        make(serMsgCnt_sptr self, std::string sync, std::string cnt, int verbose) -> serMsgCnt_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of tdd::serMsgCnt.

        To avoid accidental use of raw pointers, tdd::serMsgCnt's constructor is in a private implementation class. tdd::serMsgCnt::make is the public interface for creating new instances.

        Args:
            sync : 
            cnt : 
            verbose : 
        """
        return _tdd_swig.serMsgCnt_sptr_make(self, sync, cnt, verbose)


    def history(self):
        """history(serMsgCnt_sptr self) -> unsigned int"""
        return _tdd_swig.serMsgCnt_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(serMsgCnt_sptr self, int which, int delay)
        declare_sample_delay(serMsgCnt_sptr self, unsigned int delay)
        """
        return _tdd_swig.serMsgCnt_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(serMsgCnt_sptr self, int which) -> unsigned int"""
        return _tdd_swig.serMsgCnt_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(serMsgCnt_sptr self) -> int"""
        return _tdd_swig.serMsgCnt_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(serMsgCnt_sptr self) -> double"""
        return _tdd_swig.serMsgCnt_sptr_relative_rate(self)


    def start(self):
        """start(serMsgCnt_sptr self) -> bool"""
        return _tdd_swig.serMsgCnt_sptr_start(self)


    def stop(self):
        """stop(serMsgCnt_sptr self) -> bool"""
        return _tdd_swig.serMsgCnt_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(serMsgCnt_sptr self, unsigned int which_input) -> uint64_t"""
        return _tdd_swig.serMsgCnt_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(serMsgCnt_sptr self, unsigned int which_output) -> uint64_t"""
        return _tdd_swig.serMsgCnt_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(serMsgCnt_sptr self) -> int"""
        return _tdd_swig.serMsgCnt_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(serMsgCnt_sptr self, int m)"""
        return _tdd_swig.serMsgCnt_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(serMsgCnt_sptr self)"""
        return _tdd_swig.serMsgCnt_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(serMsgCnt_sptr self) -> bool"""
        return _tdd_swig.serMsgCnt_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(serMsgCnt_sptr self, int m)"""
        return _tdd_swig.serMsgCnt_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(serMsgCnt_sptr self) -> int"""
        return _tdd_swig.serMsgCnt_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(serMsgCnt_sptr self, int i) -> long"""
        return _tdd_swig.serMsgCnt_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(serMsgCnt_sptr self, long max_output_buffer)
        set_max_output_buffer(serMsgCnt_sptr self, int port, long max_output_buffer)
        """
        return _tdd_swig.serMsgCnt_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(serMsgCnt_sptr self, int i) -> long"""
        return _tdd_swig.serMsgCnt_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(serMsgCnt_sptr self, long min_output_buffer)
        set_min_output_buffer(serMsgCnt_sptr self, int port, long min_output_buffer)
        """
        return _tdd_swig.serMsgCnt_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(serMsgCnt_sptr self, int which) -> float
        pc_input_buffers_full(serMsgCnt_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.serMsgCnt_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(serMsgCnt_sptr self, int which) -> float
        pc_input_buffers_full_avg(serMsgCnt_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.serMsgCnt_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(serMsgCnt_sptr self, int which) -> float
        pc_input_buffers_full_var(serMsgCnt_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.serMsgCnt_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(serMsgCnt_sptr self, int which) -> float
        pc_output_buffers_full(serMsgCnt_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.serMsgCnt_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(serMsgCnt_sptr self, int which) -> float
        pc_output_buffers_full_avg(serMsgCnt_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.serMsgCnt_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(serMsgCnt_sptr self, int which) -> float
        pc_output_buffers_full_var(serMsgCnt_sptr self) -> pmt_vector_float
        """
        return _tdd_swig.serMsgCnt_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(serMsgCnt_sptr self) -> float"""
        return _tdd_swig.serMsgCnt_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(serMsgCnt_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tdd_swig.serMsgCnt_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(serMsgCnt_sptr self)"""
        return _tdd_swig.serMsgCnt_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(serMsgCnt_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tdd_swig.serMsgCnt_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(serMsgCnt_sptr self) -> int"""
        return _tdd_swig.serMsgCnt_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(serMsgCnt_sptr self) -> int"""
        return _tdd_swig.serMsgCnt_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(serMsgCnt_sptr self, int priority) -> int"""
        return _tdd_swig.serMsgCnt_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(serMsgCnt_sptr self) -> std::string"""
        return _tdd_swig.serMsgCnt_sptr_name(self)


    def symbol_name(self):
        """symbol_name(serMsgCnt_sptr self) -> std::string"""
        return _tdd_swig.serMsgCnt_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(serMsgCnt_sptr self) -> io_signature_sptr"""
        return _tdd_swig.serMsgCnt_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(serMsgCnt_sptr self) -> io_signature_sptr"""
        return _tdd_swig.serMsgCnt_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(serMsgCnt_sptr self) -> long"""
        return _tdd_swig.serMsgCnt_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(serMsgCnt_sptr self) -> basic_block_sptr"""
        return _tdd_swig.serMsgCnt_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(serMsgCnt_sptr self, int ninputs, int noutputs) -> bool"""
        return _tdd_swig.serMsgCnt_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(serMsgCnt_sptr self) -> std::string"""
        return _tdd_swig.serMsgCnt_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(serMsgCnt_sptr self, std::string name)"""
        return _tdd_swig.serMsgCnt_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(serMsgCnt_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _tdd_swig.serMsgCnt_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(serMsgCnt_sptr self) -> swig_int_ptr"""
        return _tdd_swig.serMsgCnt_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(serMsgCnt_sptr self) -> swig_int_ptr"""
        return _tdd_swig.serMsgCnt_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(serMsgCnt_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _tdd_swig.serMsgCnt_sptr_message_subscribers(self, which_port)

serMsgCnt_sptr_swigregister = _tdd_swig.serMsgCnt_sptr_swigregister
serMsgCnt_sptr_swigregister(serMsgCnt_sptr)


serMsgCnt_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
serMsgCnt = serMsgCnt.make;



